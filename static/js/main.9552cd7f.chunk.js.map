{"version":3,"sources":["js/components/TextBTD6Font.js","js/components/Title.js","js/btd6info.js","js/components/Version.js","js/components/CustomFormSwitch.js","js/components/CustomFormSlider.js","js/components/BlackBorder.js","js/components/OptionsFormContainer.js","js/components/ResultsCard.js","js/components/PlayerField.js","js/components/Results.js","js/random.js","js/btd6randomizer.js","js/components/PlayerNameInput.js","js/components/Randomizer.js","js/App.js","js/reportWebVitals.js","index.js"],"names":["TextBTD6Font","props","Tag","as","className","children","Title","btd6_modes_array","btd6_only_modes","btd6_maps","Beginner","Intermediate","Advanced","Expert","btd6_heroes","btd6_towers","primary","military","magic","support","Version","href","id","CustomFormSwitch","Form","Group","Row","undefined","Col","sm","disabled","type","checked","onChange","Label","column","CustomFormSlider","controlId","Control","min","max","value","readOnly","BlackBorder","OptionsFormContainer","Button","onClick","onSubmit","ResultsCard","title","TowerListItem","towerNo","tower","PlayerField","towers","i","length","push","playerName","hero","Results","randomMap","randomMode","playerNames","heroes","choices","playerCount","towerCount","slice","random_player_choices","randomHeroes","randomTowers","getRandomInt","Math","ceil","floor","random","shuffle","array","end","shuffle_array","counter","index","temp","getRandomArrayItem","getRandomObjectKey","object","Object","keys","getRandomTowers","noOfTowers","towerType","towerArray","validTowerTypes","BTD6Data","includes","key","PlayerNameInput","placeholder","concat","Randomizer","useState","setPlayerCount","isRandomizeMap","setRandomizeMap","isRandomizeMode","setRandomizeMode","isRandomizeHeroes","setRandomizeHeroes","isRandomizeTowers","setRandomizeTowers","isRestrictTowerType","setRestrictTowerType","maxTowers","setMaxTowers","setPlayerNames","final_playerCount","setFinal_playerCount","setRandomMap","setRandomMode","setRandomHeroes","setRandomTowers","final_playerNames","setFinal_playerNames","Container","e","preventDefault","final_names","setFinalNames","difficulty","randomizer","isTowersRandomized","modeArray","heroes_list","playerTowers","modes","randomTowersByType","j","alert","target","count","inputs","name","names","setName","player_name_inputs","span","offset","Text","muted","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9552cd7f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction TextBTD6Font(props) {\r\n    // Declare variable 'Tag' with leading capital letter so that React treats is as a component.\r\n    const Tag = ((props.as) ? props.as : \"p\");  // If tag not specified, just use the paragraph tag by default.\r\n    const className = props.className + \" btd6font\";\r\n\r\n    return (\r\n        <Tag className={className}>\r\n            {props.children}\r\n        </Tag>\r\n    )\r\n}\r\n\r\n\r\nexport default TextBTD6Font;\r\n","import React from 'react';\r\n\r\nimport TextBTD6Font from './TextBTD6Font';\r\n\r\n\r\nfunction Title() {\r\n    return (\r\n        <div className=\"transbox\">\r\n            <TextBTD6Font as={\"h2\"} className=\"text-center\">\r\n                Bloons TD6 Randomizer\r\n            </TextBTD6Font>\r\n            <TextBTD6Font as={\"h4\"} className=\"text-center\">\r\n                Randomizes options for maps, hero selection, mode selection and tower selection\r\n            </TextBTD6Font>\r\n        </div>\r\n    );\r\n}\r\n\r\n  \r\nexport default Title;\r\n","const btd6_version = \"27.1.4229\"\r\nconst randomizer_version = \"2.1.0\"\r\n\r\n\r\nconst btd6_modes_array = [\r\n    \"Standard Easy\",\r\n    \"Primary Monkeys Only (Easy)\",\r\n    \"Deflation (Easy)\",\r\n    \"Standard Medium\",\r\n    \"Military Monkeys Only (Medium)\",\r\n    \"Apopalypse (Medium)\",\r\n    \"Reverse (Medium)\",\r\n    \"Standard Hard\",\r\n    \"Magic Monkeys Only (Hard)\",\r\n    \"Double HP MOABs (Hard)\",\r\n    \"Half Cash (Hard)\",\r\n    \"Alternate Bloon Rounds (Hard)\",\r\n    \"Impoppable (Hard)\",\r\n    \"CHIMPS (Hard)\",\r\n];\r\n\r\n//Indices of modes to blacklist when randomizing towers in btd6_modes\r\nconst btd6_only_modes = [\r\n    1,4,8\r\n]\r\n\r\n\r\n\r\n/*\r\n * Object structure to contain the images.\r\n * Can be used in the future to implement the images onto the website.\r\n */\r\nconst btd6_maps = {\r\n    Beginner: {\r\n    \"Monkey Meadow\": \"../static/btd6 maps png/MonkeyMeadow_no_UI.png\",\r\n    \"Tree Stump\": \"../static/btd6 maps png/TreeStump_No_UI.png\",\r\n    \"Town Center\": \"../static/btd6 maps png/TownCenter_No_UI.png\",\r\n    \"Resort\": \"../static/btd6 maps png/Resort.png\",\r\n    \"Skates\": \"../static/btd6 maps png/Skates.png\",\r\n    \"Lotus Island\": \"../static/btd6 maps png/Lotus Island.png\",\r\n    \"Candy Falls\": \"../static/btd6 maps png/CandyFalls_No_UI.png\",\r\n    \"Winter Park\": \"../static/btd6 maps png/WinterPark_No_UI.png\",\r\n    \"Carved\": \"../static/btd6 maps png/Carved_No_UI.png\",\r\n    \"Park Path\": \"../static/btd6 maps png/ParkPath_No_UI.png\",\r\n    \"Alpine Run\": \"../static/btd6 maps png/AlpineRun_No_UI.png\",\r\n    \"Frozen Over\": \"../static/btd6 maps png/FrozenOver_No_UI.png\",\r\n    \"In the Loop\": \"../static/btd6 maps png/InTheLoop_No_UI.png\",\r\n    \"Cubism\": \"../static/btd6 maps png/Cubism_No_UI.png\",\r\n    \"Four Circles\": \"../static/btd6 maps png/FourCircles_No_UI.png\",\r\n    \"Hedge\": \"../static/btd6 maps png/Hedge_No_UI.png\",\r\n    \"End of the Road\": \"../static/btd6 maps png/EndOfTheRoad_No_UI.png\",\r\n    \"Logs\": \"../static/btd6 maps png/Logs_No_UI.png\",\r\n    },\r\n    Intermediate: {\r\n        \"Bloonarius Prime\": \"../static/btd6 maps png/Bloonarius_Prime_Map.png\",\r\n        \"Balance\": \"../static/btd6 maps png/Balance.png\",\r\n        \"Encrypted\": \"../static/btd6 maps png/Encrypted.png\",\r\n        \"Bazaar\": \"../static/btd6 maps png/Bazaar.png\",\r\n        \"Adora's Temple\": \"../static/btd6 maps png/AdorasTemple_No_UI.png\",\r\n        \"Spring Spring\": \"../static/btd6 maps png/SpringSpring_No_UI.png\",\r\n        \"Kartsndarts\": \"../static/btd6 maps png/KartsNDarts_No_UI.png\",\r\n        \"Moon Landing\": \"../static/btd6 maps png/MoonLanding_No_UI.png\",\r\n        \"Haunted\": \"../static/btd6 maps png/Haunted_No_UI.png\",\r\n        \"Downstream\": \"../static/btd6 maps png/Downstream_No_UI.png\",\r\n        \"Firing Range\": \"../static/btd6 maps png/FiringRange_No_UI.png\",\r\n        \"Cracked\": \"../static/btd6 maps png/Cracked_No_UI.png\",\r\n        \"Streambed\": \"../static/btd6 maps png/Streambed_No_UI.png\",\r\n        \"Chutes\": \"../static/btd6 maps png/Chutes_No_UI.png\",\r\n        \"Rake\": \"../static/btd6 maps png/Rake_No_UI.png\",\r\n        \"Spice Islands\": \"../static/btd6 maps png/SpiceIslands_No_UI.png\"\r\n    },\r\n    Advanced: {\r\n        \"X Factor\": \"../static/btd6 maps png/X Factor.png\",\r\n        \"Mesa\": \"../static/btd6 maps png/Mesa_No_UI.png\",\r\n        \"Geared\": \"../static/btd6 maps png/Geared_No_UI.png\",\r\n        \"Spillway\": \"../static/btd6 maps png/Spillway_No_UI.png\",\r\n        \"Cargo\": \"../static/btd6 maps png/Cargo_No_UI.png\",\r\n        \"Pat's Pond\": \"../static/btd6 maps png/PatsPond_No_UI.png\",\r\n        \"Peninsula\": \"../static/btd6 maps png/Peninsula_No_UI.png\",\r\n        \"High Finance\": \"../static/btd6 maps png/HighFinance_No_UI.png\",\r\n        \"Another Brick\": \"../static/btd6 maps png/AnotherBrick_No_UI.png\",\r\n        \"Off the Coast\": \"../static/btd6 maps png/OffTheCoast_No_UI.png\",\r\n        \"Cornfield\": \"../static/btd6 maps png/Cornfield_No_UI.png\",\r\n        \"Underground\": \"../static/btd6 maps png/Underground_No_UI.png\"\r\n    },\r\n    Expert: {\r\n        \"Ravine\": \"../static/btd6 maps png/Ravine.png\",\r\n        \"Flooded Valley\": \"../static/btd6 maps png/Flooded_Valley_No_UI.png\",\r\n        \"Infernal\": \"../static/btd6 maps png/Infernal_No_UI.png\",\r\n        \"Bloody Puddles\": \"../static/btd6 maps png/BloodyPuddles_No_UI.png\",\r\n        \"Workshop\": \"../static/btd6 maps png/Workshop_No_UI.png\",\r\n        \"Quad\": \"../static/btd6 maps png/Quad_No_UI.png\",\r\n        \"Dark Castle\": \"../static/btd6 maps png/DarkCastle_No_UI.png\",\r\n        \"Muddy Puddles\": \"../static/btd6 maps png/MuddyPuddles_No_UI.png\",\r\n        \"#Ouch\": \"../static/btd6 maps png/Ouch_No_UI.png\"\r\n    }\r\n};\r\n\r\nconst btd6_heroes = {\r\n    \"Quincy\": \"../static/btd6 heroes png/QuincyPortrait.png\",\r\n    \"Gwendolin\": \"../static/btd6 heroes png/GwendolinPortrait.png\",\r\n    \"Striker Jones\": \"../static/btd6 heroes png/Striker_Jones.png\",\r\n    \"Obyn Greenfoot\": \"../static/btd6 heroes png/ObynGreenFootPortraitLvl10.png\",\r\n    \"Captain Churchill\": \"../static/btd6 heroes png/CaptainChurchillPortrait.png\",\r\n    \"Benjamin\": \"../static/btd6 heroes png/BenjaminPortrait.png\",\r\n    \"Ezili\": \"../static/btd6 heroes png/Elizi.png\",\r\n    \"Pat Fusty\": \"../static/btd6 heroes png/PatFutsyPortraitLvl5.png\",\r\n    \"Adora\": \"../static/btd6 heroes png/Adora.png\",\r\n    \"Admiral Brickell\": \"../static/btd6 heroes png/AdmiralBrickellPortrait.png\",\r\n    \"Etienne\": \"../static/btd6 heroes png/EtiennePortrait.png\",\r\n    \"Sauda\": \"../static/btd6 heroes png/Sauda.png\",\r\n    \"Psi\": \"../static/btd6 heroes png/PsiPortrait.png\",\r\n};\r\n\r\nconst btd6_towers = {\r\n    primary: {\r\n        \"Dart Monkey\": \"../static/btd6 towers png/100-DartMonkey.png\",\r\n        \"Boomerang Monkey\": \"../static/btd6 towers png/BTD6_Boomerang_Monkey.png\",\r\n        \"Bomb Shooter\": \"../static/btd6 towers png/Bomb_Shooter.png\",\r\n        \"Tack Shooter\": \"../static/btd6 towers png/BTD6_Tack_Shooter.png\",\r\n        \"Ice Monkey\": \"../static/btd6 towers png/Ice_Monkey.png\",\r\n        \"Glue Gunner\": \"../static/btd6 towers png/BTD6_Glue_Gunner.png\"\r\n    },\r\n    military: {\r\n        \"Sniper Monkey\": \"../static/btd6 towers png/BTD6_Sniper_Monkey.png\",\r\n        \"Monkey Sub\": \"../static/btd6 towers png/BTD6_Monkey_Sub.png\",\r\n        \"Monkey Buccaneer\": \"../static/btd6 towers png/BTD6_Monkey_Buccaneer.png\",\r\n        \"Monkey Ace\": \"../static/btd6 towers png/BT6_Monkey_Ace.png\",\r\n        \"Heli Pilot\": \"../static/btd6 towers png/BTD6_Heli_Pilot.png\",\r\n        \"Mortar Monkey\": \"../static/btd6 towers png/000-MortarMonkey.png\",\r\n        \"Dartling Gunner\": \"../static/btd6 towers png/000-DartlingGunner.png\"\r\n    },\r\n    magic: {\r\n        \"Wizard Monkey\": \"../static/btd6 towers png/Monkey_Wizard.png\",\r\n        \"Super Monkey\": \"../static/btd6 towers png/BTD6_Super_Monkey.png\",\r\n        \"Ninja Monkey\": \"../static/btd6 towers png/BTD6_Ninja_monkey.png\",\r\n        \"Alchemist\": \"../static/btd6 towers png/001-Alchemist.png\",\r\n        \"Druid\": \"../static/btd6 towers png/Druid_Monkey.png\"\r\n    },\r\n    support: {\r\n        \"Banana Farm\": \"../static/btd6 towers png/BTD6_Banana_Farm.png\",\r\n        \"Spike Factory\": \"../static/btd6 towers png/BTD6_Spike_Factory.png\",\r\n        \"Monkey Village\": \"../static/btd6 towers png/BTD6_Monkey_Village.png\",\r\n        \"Engineer Monkey\": \"../static/btd6 towers png/000-EngineerMonkey.png\"\r\n    }\r\n};\r\n\r\nexport {\r\n    btd6_version,\r\n    randomizer_version,\r\n    btd6_modes_array,\r\n    btd6_only_modes,\r\n    btd6_maps,\r\n    btd6_heroes,\r\n    btd6_towers,\r\n};\r\n","import React from 'react';\r\nimport { btd6_version, randomizer_version } from '../btd6info.js';\r\n\r\n\r\nfunction Version() {\r\n    return (\r\n        <div className=\"transbox w-100 fixed-bottom text-end\">\r\n            <a href=\"https://github.com/whysnakes/btd6randomizerv2/blob/main/CHANGELOG.md\" id=\"pagefooter\" className=\"cleanlink mx-2\">\r\n                Version <strong>{randomizer_version}</strong> based on BTD6 version <strong>{btd6_version}</strong>\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Version;\r\n","import React from 'react';\r\nimport { Row, Col, Form } from 'react-bootstrap';\r\n\r\n\r\nfunction CustomFormSwitch(props) {\r\n    return (\r\n        <Form.Group as={Row} className={ \"mx-2 \" + (props.className === undefined? \"\" : props.className)}>\r\n            <Col sm={1} className=\"px-0 pt-2\">\r\n                <div className=\"form-check form-switch\">\r\n                    <input\r\n                        disabled={props.disabled}\r\n                        className=\"form-check-input\"\r\n                        type=\"checkbox\"\r\n                        checked={props.checked}\r\n                        onChange={props.onChange}\r\n                    />\r\n                </div>\r\n            </Col>\r\n            <Form.Label column sm={11} className=\"text-start ps-2\">\r\n                {props.children}\r\n            </Form.Label>\r\n        </Form.Group>\r\n    )\r\n}\r\n\r\n\r\nexport default CustomFormSwitch;\r\n","import React from 'react';\r\nimport { Row, Col, Form } from 'react-bootstrap';\r\n\r\n\r\nfunction CustomFormSlider(props) {\r\n    return (\r\n        <Form.Group as={Row} className={props.className} controlId={props.controlId}>\r\n            <Form.Label className=\"text-start align-middle\" column sm={5}>\r\n                {props.children}\r\n            </Form.Label>\r\n            <Col sm={4} className=\"my-auto\">\r\n                <Form.Control\r\n                    type=\"range\"\r\n                    min={props.min}\r\n                    max={props.max}\r\n                    disabled={props.disabled}\r\n                    value={props.value}\r\n                    onChange={props.onChange}\r\n                />\r\n            </Col>\r\n            <Col sm={3}>\r\n                <Form.Control\r\n                    type=\"number\"\r\n                    min={props.min}\r\n                    max={props.max}\r\n                    value={props.value}\r\n                    readOnly\r\n                />\r\n            </Col>\r\n        </Form.Group>\r\n    )\r\n}\r\n\r\n\r\nexport default CustomFormSlider;\r\n","import React from 'react';\r\n\r\n\r\nfunction BlackBorder(props) {\r\n    return (\r\n        <div className=\"transbox border border-dark rounded\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default BlackBorder;\r\n","import React from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\n\r\nimport TextBTD6Font from './TextBTD6Font';\r\nimport BlackBorder from './BlackBorder';\r\n\r\n\r\nfunction OptionsFormContainer(props) {\r\n    return (\r\n        <BlackBorder>\r\n            <TextBTD6Font as={\"h2\"} className=\"text-center\">\r\n                Options\r\n            </TextBTD6Font>\r\n            <Form>\r\n                {props.children}\r\n                <Button type=\"button\" id=\"generator_btn\" className=\"btn btn-primary btn-center mt-5 mb-3\" onClick={props.onSubmit}>\r\n                    Generate\r\n                </Button>\r\n            </Form>\r\n        </BlackBorder>\r\n    );\r\n}\r\n\r\n\r\nexport default OptionsFormContainer;\r\n","import React from 'react';\r\n\r\nimport TextBTD6Font from './TextBTD6Font';\r\n\r\n\r\nfunction ResultsCard(props) {\r\n    return (\r\n        <div className=\"card mb-2\">\r\n            <div className=\"card-header bg-dark text-white\">\r\n                <TextBTD6Font as={\"h5\"}>{props.title}</TextBTD6Font>\r\n            </div>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ResultsCard;\r\n","import React from 'react';\r\n\r\nimport TextBTD6Font from './TextBTD6Font';\r\nimport ResultsCard from './ResultsCard';\r\n\r\n\r\nconst TowerListItem = (props) => {\r\n    return <TextBTD6Font as={\"li\"} className=\"list-group-item\">Tower {props.towerNo}: {props.tower}</TextBTD6Font>;\r\n}\r\n\r\nconst PlayerField = (props) => {\r\n    const towers = [];\r\n    for (let i = 1; i <= props.towers.length; i++) {\r\n        towers.push(<TowerListItem towerNo={i} tower={props.towers[i-1]} />);\r\n    }\r\n\r\n    return (\r\n        <ResultsCard title={props.playerName}>\r\n            <ul className=\"list-group list-group flush\">\r\n                {props.hero && <TextBTD6Font as={\"li\"} className=\"list-group-item\">Hero: {props.hero}</TextBTD6Font>}\r\n                {props.towers.length > 0 && towers}\r\n            </ul>\r\n        </ResultsCard>\r\n    )\r\n}\r\n\r\n\r\nexport default PlayerField;\r\n","import React from 'react';\r\n\r\nimport TextBTD6Font from './TextBTD6Font';\r\nimport BlackBorder from './BlackBorder';\r\nimport ResultsCard from './ResultsCard';\r\nimport PlayerField from './PlayerField';\r\n\r\n\r\nfunction Results(props) {\r\n\r\n    const random_player_choices = (playerNames, heroes, towers) => {\r\n        const choices = [];\r\n        const playerCount = playerNames.length;\r\n        const towerCount = towers.length / playerCount;\r\n        if (heroes.length > 0 || towers.length > 0) {\r\n            for (let i = 1; i <= playerCount; i++) {\r\n                choices.push(<PlayerField playerName={playerNames[i-1]} hero={heroes[i-1]} towers={towers.slice((i - 1) * towerCount, i * towerCount)} />);\r\n            }\r\n        }\r\n        return choices;\r\n    }\r\n\r\n    return (\r\n        <BlackBorder>\r\n            <TextBTD6Font as={\"h2\"} className=\"text-center\">\r\n                Results\r\n            </TextBTD6Font>\r\n\r\n            {props.randomMap.length > 0 &&\r\n                <ResultsCard title={\"Map\"}>\r\n                    <div className=\"card-body\">\r\n                        <TextBTD6Font as={\"h5\"}>{props.randomMap}</TextBTD6Font>\r\n                    </div>\r\n                </ResultsCard>\r\n            }\r\n\r\n            {props.randomMode.length > 0 &&\r\n                <ResultsCard title={\"Mode\"}>\r\n                    <div className=\"card-body\">\r\n                        <TextBTD6Font as={\"h5\"}>{props.randomMode}</TextBTD6Font>\r\n                    </div>\r\n                </ResultsCard>\r\n            }\r\n\r\n            {random_player_choices(props.playerNames, props.randomHeroes, props.randomTowers)}\r\n\r\n        </BlackBorder>\r\n    );\r\n  }\r\n\r\n\r\n  export default Results;\r\n","/**\r\n * Uses Math.random() to generate a randomized integer from within the specified minimum and maximum. Taken from MDN.\r\n * \r\n * @param  {Number} min - Minimum integer value, inclusive\r\n * @param  {Number} max - Maximum integer value, exclusive\r\n * @return {Number}     - A randomized integer\r\n */\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\n/**\r\n * Uses Fisher-Yates algorithm to shuffle an array (prevent bias with Math.random()). Taken from SO\r\n * \r\n * @param  {Array}  array   - Array to shuffle\r\n * @param  {Number} [end]   - Last index in array to shuffle for partial shuffles\r\n * @return {Array}          - Shuffled array\r\n */\r\nfunction shuffle(array, end) {\r\n    let shuffle_array = [...array];\r\n    if (!end) {\r\n        end = array.length - 1;\r\n    }\r\n    let counter = 0;\r\n\r\n    // While not yet swapped the required number of elements.\r\n    while (counter < end) {\r\n        // Pick a random index.\r\n        let index = getRandomInt(counter, shuffle_array.length);\r\n\r\n        // Swap the first element with it.\r\n        let temp = shuffle_array[counter];\r\n        shuffle_array[counter] = shuffle_array[index];\r\n        shuffle_array[index] = temp;\r\n\r\n        // And increase counter by 1.\r\n        counter++;\r\n    }\r\n    return shuffle_array;\r\n}\r\n\r\n/**\r\n * Randomly selects 1 item from an array.\r\n * \r\n * @param  {any[]} array    - The array from which a random element is to be selected from.\r\n * @return {any}            - A random item from the array.\r\n */\r\nfunction getRandomArrayItem(array) {\r\n    return array[getRandomInt(0, array.length)];\r\n}\r\n\r\n/**\r\n * Randomly selects 1 property from an Object.\r\n * \r\n * @param  {Object} object  - The object from which a random property is to be selected from.\r\n * @return                  - A random property from the object.\r\n */\r\nfunction getRandomObjectKey(object) {\r\n    const keys = Object.keys(object);\r\n    return getRandomArrayItem(keys);\r\n}\r\n\r\nexport {\r\n    getRandomInt,\r\n    shuffle,\r\n    getRandomArrayItem,\r\n    getRandomObjectKey\r\n}","import * as BTD6Data from './btd6info';\r\nimport * as random from './random';\r\n\r\n\r\n/**\r\n * Returns a random BTD6 map.\r\n * \r\n * @param  None\r\n * @return {String} - Name of a random map.\r\n */\r\nfunction getRandomMap() {\r\n    const difficulty = random.getRandomObjectKey(BTD6Data.btd6_maps);\r\n    return random.getRandomObjectKey(BTD6Data.btd6_maps[difficulty]);\r\n}\r\n\r\n/**\r\n * Returns a random BTD6 game mode.\r\n * Will not return \"X Monkeys Only\" game modes if towers are randomized.\r\n * \r\n * @param  {Boolean} [isTowersRandomized]   - Flag indicating if towers are randomized\r\n * @return {String}                         - Name of a random game mode.\r\n */\r\nfunction getRandomMode(isTowersRandomized) {\r\n    let modeArray = [];\r\n    for(var i = 0; i < BTD6Data.btd6_modes_array.length; i++) {\r\n        if (!isTowersRandomized || !BTD6Data.btd6_only_modes.includes(i)) {\r\n            modeArray.push(BTD6Data.btd6_modes_array[i]);\r\n        }\r\n    }\r\n    return random.getRandomArrayItem(modeArray);\r\n}\r\n\r\n/**\r\n * Returns a random BTD6 hero.\r\n * \r\n * @param  None\r\n * @return {String} - Name of a random hero.\r\n */\r\nfunction getRandomHero() {\r\n    return random.getRandomObjectKey(BTD6Data.btd6_heroes);\r\n}\r\n\r\n/**\r\n * Returns a collection of random towers.\r\n * \r\n * @param  {Number}   noOfTowers    - Positive integer that is the number of random towers wanted. Note that there are a maximum of 22 towers, thus anything more than 22 makes no sense.\r\n * @param  {String}   [towerType]   - Optional argument of either \"primary\", \"military\", \"magic\" or \"support\". If a type is specified, then only towers of that type will be randomly chosen. Ignores this parameter if the input tower type is invalid.\r\n * @return {String[]}               - Array of tower names.\r\n */\r\nfunction getRandomTowers(noOfTowers, towerType) {\r\n    const towerArray = [];\r\n    const validTowerTypes = Object.keys(BTD6Data.btd6_towers)\r\n\r\n    if (!towerType || !validTowerTypes.includes(towerType)) {\r\n        for (const key of validTowerTypes) {\r\n            for (const tower in BTD6Data.btd6_towers[key]) {\r\n                towerArray.push(tower);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        for (const tower in BTD6Data.btd6_towers[towerType]) {\r\n            towerArray.push(tower);\r\n        }\r\n    }\r\n\r\n    return random.shuffle(towerArray, noOfTowers).slice(0, noOfTowers);\r\n}\r\n\r\nexport {\r\n    getRandomMap,\r\n    getRandomMode,\r\n    getRandomHero,\r\n    getRandomTowers\r\n}\r\n","import React from 'react';\r\nimport { Row, Col, Form } from 'react-bootstrap';\r\n\r\n\r\nconst PlayerNameInput = (props) => {\r\n    return (\r\n        <Form.Group as={Row}>\r\n            <Form.Label column sm=\"auto\">\r\n                Player {props.i}'s name:\r\n            </Form.Label>\r\n            <Col sm=\"auto\">\r\n                <Form.Control\r\n                    type=\"text\"\r\n                    placeholder={\"Player \".concat(props.i)}\r\n                    value={props.value}\r\n                    onChange={props.onChange}\r\n                />\r\n            </Col>\r\n        </Form.Group>\r\n    )\r\n}\r\n\r\n\r\nexport default PlayerNameInput;\r\n","import React, { useState } from 'react';\r\nimport { Container, Row, Col, Form } from 'react-bootstrap';\r\n\r\nimport CustomFormSwitch from './CustomFormSwitch';\r\nimport CustomFormSlider from './CustomFormSlider';\r\nimport OptionsFormContainer from './OptionsFormContainer';\r\nimport Results from './Results';\r\nimport * as randomizer from '../btd6randomizer';\r\nimport { btd6_towers } from '../btd6info';\r\nimport { shuffle } from '../random';\r\nimport PlayerNameInput from './PlayerNameInput';\r\n\r\n\r\nfunction Randomizer() {\r\n    const [playerCount, setPlayerCount] = useState(1);\r\n    const [isRandomizeMap, setRandomizeMap] = useState(false);\r\n    const [isRandomizeMode, setRandomizeMode] = useState(false);\r\n    const [isRandomizeHeroes, setRandomizeHeroes] = useState(false);\r\n    const [isRandomizeTowers, setRandomizeTowers] = useState(false);\r\n    const [isRestrictTowerType, setRestrictTowerType] = useState(false);\r\n    const [maxTowers, setMaxTowers] = useState(1);\r\n    const [playerNames, setPlayerNames] = useState([\"\", \"\", \"\", \"\"]);\r\n\r\n    const [final_playerCount, setFinal_playerCount] = useState(playerCount);\r\n    const [randomMap, setRandomMap] = useState(\"\");\r\n    const [randomMode, setRandomMode] = useState(\"\");\r\n    const [randomHeroes, setRandomHeroes] = useState([]);\r\n    const [randomTowers, setRandomTowers] = useState([]);\r\n    const [final_playerNames, setFinal_playerNames] = useState([]);\r\n\r\n    function generateRandomOptions(e) {\r\n        e.preventDefault();  // Prevents the default behaviour of refreshing a page when submitting a form.\r\n\r\n        // Reset all values to empty first.\r\n        setRandomMap(\"\");\r\n        setRandomMode(\"\");\r\n        setRandomHeroes([]);\r\n        setRandomTowers([]);\r\n\r\n        setFinal_playerCount(playerCount);\r\n        setFinalNames();\r\n\r\n        if (!isRandomizeMap && !isRandomizeMode && !isRandomizeHeroes && !isRandomizeTowers )\r\n        {\r\n            alert(\"Please select at least one option to randomize\");\r\n            return;\r\n        }\r\n\r\n        if (isRandomizeMap) {\r\n            setRandomMap(randomizer.getRandomMap());\r\n        }\r\n        if (isRandomizeMode) {\r\n            setRandomMode(randomizer.getRandomMode(isRandomizeTowers));\r\n        }\r\n        if (isRandomizeHeroes) {\r\n            const heroes_list = [];\r\n            for (let i = 0; i < playerCount; i++) {\r\n                heroes_list.push(randomizer.getRandomHero());\r\n            }\r\n            setRandomHeroes(heroes_list);\r\n        }\r\n        if (isRandomizeTowers) {\r\n            let playerTowers = [];\r\n            if(isRestrictTowerType) {\r\n                let modes = Object.keys(btd6_towers);\r\n                modes = shuffle(modes);\r\n                for(let i = 0; i < playerCount; i++) {\r\n                    let randomTowersByType = randomizer.getRandomTowers(maxTowers, modes[i]);\r\n                    for(let j = 0; j < randomTowersByType.length; j++) {\r\n                        playerTowers.push(randomTowersByType[j]);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                playerTowers = randomizer.getRandomTowers(maxTowers * playerCount);\r\n            }\r\n            setRandomTowers(playerTowers);\r\n        }\r\n    }\r\n\r\n    function player_name_inputs(count) {\r\n        function setName(name, index) {\r\n            const names = [...playerNames];\r\n            names[index] = name;\r\n            setPlayerNames(names);\r\n        }\r\n\r\n        const inputs = [];\r\n        for (let i = 0; i < count; i++) {\r\n            inputs.push(<PlayerNameInput key={i} i={i + 1} value={playerNames[i]} onChange={({target: {value}}) => {setName(value, i)}} />);\r\n        }\r\n        return inputs;\r\n    }\r\n\r\n    function setFinalNames() {\r\n        const final_names = [];\r\n        for (let i = 0; i < playerCount; i++) {\r\n            if (playerNames[i] === \"\") {\r\n                final_names.push(\"Player \".concat(i + 1));\r\n            }\r\n            else {\r\n                final_names.push(playerNames[i]);\r\n            }\r\n        }\r\n        setFinal_playerNames(final_names);\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col>\r\n                    <div className=\"Options\">\r\n                        <OptionsFormContainer onSubmit={generateRandomOptions}>\r\n\r\n                            {/* offset this option to align with other options */}\r\n                            <Row>\r\n                                <CustomFormSlider className=\"col-sm-11 offset-sm-1 mb-3\" controlId=\"player_count\" min=\"1\" max=\"4\" value={playerCount} onChange={({target:{value}}) => setPlayerCount(value)}>\r\n                                    Number of players:\r\n                                </CustomFormSlider>\r\n                            </Row>\r\n\r\n                            <div className=\"accordion mb-3\" id=\"playerCount\">\r\n                                <div className=\"accordion-item\">\r\n                                    <h2 className=\"accordion-header\" id=\"playerCountHeader\">\r\n                                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#playerCountContent\" aria-expanded=\"false\" aria-controls=\"playerCountContent\">\r\n                                            Player names:\r\n                                        </button>\r\n                                    </h2>\r\n                                    <div id=\"playerCountContent\" className=\"accordion-collapse collapse\" aria-labelledby=\"playerCountHeader\" data-bs-parent=\"#playerCount\">\r\n                                        <div className=\"accordion-body\">\r\n                                        {player_name_inputs(playerCount)}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <CustomFormSwitch className=\"mb-3\" checked={isRandomizeMap} onChange={() => setRandomizeMap(!(isRandomizeMap))}>\r\n                                Randomize Map?\r\n                            </CustomFormSwitch>\r\n\r\n                            <CustomFormSwitch className=\"mb-3\" checked={isRandomizeMode} onChange={() => setRandomizeMode(!(isRandomizeMode))}>\r\n                                Randomize Mode?\r\n                            </CustomFormSwitch>\r\n\r\n                            <CustomFormSwitch className=\"mb-3\" checked={isRandomizeHeroes} onChange={() => setRandomizeHeroes(!(isRandomizeHeroes))}>\r\n                                Randomize Heroes?\r\n                            </CustomFormSwitch>\r\n\r\n                            <Form.Group as={Row} className=\"mb-3\">\r\n                                <CustomFormSwitch checked={isRandomizeTowers} onChange={() => setRandomizeTowers(!(isRandomizeTowers))}>\r\n                                    Randomize Towers?\r\n                                </CustomFormSwitch>\r\n                                <Col sm={{span: 11, offset: 1}}>\r\n                                    <Form.Text muted className=\"text-start ms-2\">\r\n                                        This option prevents <strong>X Monkeys Only</strong> modes from being picked.\r\n                                    </Form.Text>\r\n                                </Col>\r\n                                <Col sm={{span: 11, offset: 1}}>\r\n                                    <CustomFormSwitch checked={isRestrictTowerType} onChange={() => setRestrictTowerType(!(isRestrictTowerType))} disabled={!(isRandomizeTowers)}>\r\n                                        Restrict each player to one tower type?\r\n                                    </CustomFormSwitch>\r\n                                </Col>\r\n                                <CustomFormSlider className=\"mb-3 col-sm-11 offset-sm-1\" controlId=\"tower_count\" min=\"1\" max=\"4\" disabled={!(isRandomizeTowers)} value={maxTowers} onChange={({target:{value}}) => setMaxTowers(value)}>\r\n                                    Towers per player:\r\n                                </CustomFormSlider>\r\n                            </Form.Group>\r\n\r\n                        </OptionsFormContainer>\r\n                    </div>\r\n                </Col>\r\n\r\n                <Col>\r\n                    <div id=\"ResultsDiv\" className=\"Results\">\r\n                        <Results\r\n                            playerCount={final_playerCount}\r\n                            playerNames={final_playerNames}\r\n                            randomMap={randomMap}\r\n                            randomMode={randomMode}\r\n                            randomHeroes={randomHeroes}\r\n                            randomTowers={randomTowers}\r\n                        />\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\nexport default Randomizer;\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/js/bootstrap.min.js';\r\nimport '../css/App.css';\r\n\r\nimport Title from './components/Title';\r\nimport Version from './components/Version';\r\nimport Randomizer from './components/Randomizer';\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"Title\">\r\n                <Title />\r\n            </div>\r\n            <Randomizer />\r\n            <footer>\r\n                <div className=\"Version\">\r\n                    <Version />\r\n                </div>\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport './css/custom.css'\r\nimport App from './js/App.js';\r\nimport reportWebVitals from './js/reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}